// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Forum-specific fields
  bio           String?
  postCount     Int       @default(0)
  reputation    Int       @default(0)
  isActive      Boolean   @default(true)
  preferences   Json?     @default("{\"theme\": \"system\", \"notifications\": true, \"emailUpdates\": true}")

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  passwordResets PasswordReset[]

  // Indexes for case-insensitive queries
  @@index([username], map: "username_ci_index")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Forum models
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  postCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       Post[]
}

model Post {
  id              String   @id @default(cuid())
  title           String
  content         String   @db.Text
  categoryId      String
  authorId        String
  authorUsername  String   // Store username for faster queries
  isPinned        Boolean  @default(false)
  isLocked        Boolean  @default(false)
  views           Int      @default(0)
  likes           Int      @default(0)
  replies         Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments        Comment[]
  postLikes       Like[]   @relation("PostLikes")
}

model Comment {
  id              String   @id @default(cuid())
  postId          String
  authorId        String
  authorUsername  String   // Store username for faster queries
  content         String   @db.Text
  parentId        String?  // For nested replies
  likes           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent          Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  commentLikes    Like[]   @relation("CommentLikes")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
}