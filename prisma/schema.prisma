// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  userId        Int       @unique @default(autoincrement()) // Custom sequential user ID
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastUsernameChangeAt DateTime?

  // Forum-specific fields
  bio           String?
  postCount     Int       @default(0)
  reputation    Int       @default(0)
  isActive      Boolean   @default(true)
  preferences   Json?     @default("{\"theme\": \"system\", \"notifications\": true, \"emailUpdates\": true}")

  // Advanced User Management
  title         String?   // Custom user title
  location      String?
  occupation    String?
  website       String?
  birthday      DateTime?
  timezone      String?
  signature     String?   @db.Text
  aboutMe       String?   @db.Text
  
  // User Status & Restrictions
  isBanned      Boolean   @default(false)
  bannedUntil   DateTime?
  bannedReason  String?
  bannedById    String?
  banCount      Int       @default(0)
  warningPoints Int       @default(0)
  isEmailBouncing Boolean @default(false)
  
  // Activity & Engagement
  lastActivity  DateTime  @default(now())
  messageCount  Int       @default(0)
  likeCount     Int       @default(0)
  trophyPoints  Int       @default(0)
  profileViews  Int       @default(0)
  
  // Privacy & Security
  privacySettings Json?   @default("{\"showOnline\": true, \"receiveMessages\": true, \"showEmail\": false}")
  emailNotifications Json? @default("{\"replies\": true, \"mentions\": true, \"conversations\": true}")
  
  // Role and permissions
  roleId        String?   @default("member") // Default role
  role          Role?     @relation(fields: [roleId], references: [id])
  secondaryRoles UserSecondaryRole[]

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  featuredPosts Post[]    @relation("FeaturedByUser")
  comments      Comment[]
  likes         Like[]
  passwordResets PasswordReset[]
  
  // New relations
  watches       Watch[]
  reports       Report[] @relation("ReportReporter")
  resolvedReports Report[] @relation("ReportResolver")
  notifications Notification[]

  // Reactions & Bookmarks
  reactions     Reaction[]
  bookmarks     Bookmark[]
  pollVotes     PollVote[]

  // Social graph & messaging
  follows       Follow[]       @relation("UserFollowsFollower")
  following     Follow[]       @relation("UserFollowsFollowing")
  ignores       Ignore[]       @relation("UserIgnoresIgnorer")
  ignoredBy     Ignore[]       @relation("UserIgnoresIgnored")
  conversations ConversationParticipant[]
  drafts        Draft[]
  sentMessages  ConversationMessage[] @relation("UserSentMessages")

  // Advanced User Management Relations
  bannedBy      User?          @relation("UserBannedBy", fields: [bannedById], references: [id])
  bannedUsers   User[]         @relation("UserBannedBy")
  userSessions  UserSession[]
  userIpLogs    UserIpLog[]
  warnings      Warning[]      @relation("UserWarnings")
  givenWarnings Warning[]      @relation("WarningGivenBy")
  userTrophies  UserTrophy[]
  profilePosts  ProfilePost[]  @relation("ProfilePostTarget")
  sentProfilePosts ProfilePost[] @relation("ProfilePostAuthor")
  profilePostComments ProfilePostComment[] @relation("ProfilePostCommentAuthor")
  customFields  UserCustomField[]
  userUpgrades  UserUpgrade[]
  
  // Enhanced forum relations
  authoredPosts EnhancedPost[] @relation("PostAuthor")
  deletedPosts  EnhancedPost[] @relation("PostDeletedBy")
  authoredReplies PostReply[]  @relation("ReplyAuthor")
  deletedReplies PostReply[]   @relation("ReplyDeletedBy")
  postRatings   PostRating[]
  postViews     PostView[]
  newsArticles  NewsFeed[]     @relation("NewsAuthor")
  
  // Node permissions
  nodePermissions NodePermission[]
  moderatedNodes NodeModerator[] @relation("UserNodeModerator")

  // Indexes for case-insensitive queries
  @@index([username], map: "username_ci_index")
  @@index([roleId])
  @@index([isBanned])
  @@index([lastActivity])
  @@index([warningPoints])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Legacy Category model (keeping for backward compatibility)
model Category {
  id          String   @id @default(cuid())
  categoryId  Int      @unique @default(autoincrement()) // Custom sequential category ID
  name        String
  description String?
  icon        String?
  color       String?
  postCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       Post[]
  prefixes    ThreadPrefix[]
  drafts      Draft[]
}

model Post {
  id              String   @id @default(cuid())
  postId          Int      @unique @default(autoincrement()) // Custom sequential post ID
  title           String
  content         String   @db.Text
  categoryId      String
  authorId        String
  authorUsername  String   // Store username for faster queries
  isPinned        Boolean  @default(false)
  isFeatured      Boolean  @default(false)
  featuredAt      DateTime?
  featuredById    String?
  isLocked        Boolean  @default(false)
  views           Int      @default(0)
  likes           Int      @default(0)
  replies         Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  featuredBy      User?    @relation("FeaturedByUser", fields: [featuredById], references: [id])
  comments        Comment[]
  postLikes       Like[]   @relation("PostLikes")

  tags            PostTag[]
  watches         Watch[]
  reactions       Reaction[]
  bookmarks       Bookmark[]
  poll            Poll?
  prefixId        String?
  prefix          ThreadPrefix? @relation(fields: [prefixId], references: [id])
  attachments     PostSimpleAttachment[]

  @@index([isFeatured, featuredAt])
}

model Comment {
  id              String   @id @default(cuid())
  commentId       Int      @unique @default(autoincrement()) // Custom sequential comment ID
  postId          String
  authorId        String
  authorUsername  String   // Store username for faster queries
  content         String   @db.Text
  parentId        String?  // For nested replies
  likes           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent          Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  commentLikes    Like[]   @relation("CommentLikes")
  reactions       Reaction[]
}

model Like {
  id        String   @id @default(cuid())
  likeId    Int      @unique @default(autoincrement()) // Custom sequential like ID
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

// Reactions (emoji/like variants)
model Reaction {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  type      String   // e.g. 'like','love','laugh','wow','sad','angry','custom:thumbsup'
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type])
  @@unique([userId, commentId, type])
  @@index([postId])
  @@index([commentId])
}

// Bookmarks (thread subscriptions separate from Watches)
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Polls
model Poll {
  id         String   @id @default(cuid())
  postId     String   @unique
  question   String
  isMultiple Boolean  @default(false)
  closesAt   DateTime?
  createdAt  DateTime @default(now())

  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  options    PollOption[]
  votes      PollVote[]
}

model PollOption {
  id        String   @id @default(cuid())
  pollId    String
  text      String
  votes     Int      @default(0)
  pollVotes PollVote[]

  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@index([pollId])
}

model PollVote {
  id        String   @id @default(cuid())
  pollId    String
  optionId  String
  userId    String
  createdAt DateTime @default(now())

  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, optionId])
  @@index([userId])
}

// Tags
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     PostTag[]

  @@index([slug])
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([tagId])
}

// Thread prefixes
model ThreadPrefix {
  id         String   @id @default(cuid())
  name       String
  color      String?
  categoryId String?
  createdAt  DateTime @default(now())

  category   Category? @relation(fields: [categoryId], references: [id])
  nodes      Node[]    @relation("NodePrefixes")
  posts      Post[]
  enhancedPosts EnhancedPost[]

  @@index([categoryId])
}

// Watch/Subscribe System
model Watch {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Content Reports
model Report {
  id          String   @id @default(cuid())
  reportId    Int      @unique @default(autoincrement())
  reporterId  String
  contentType String
  contentId   String
  reason      String
  description String?
  status      String   @default("pending")
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reporter    User @relation("ReportReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  resolver    User? @relation("ReportResolver", fields: [resolvedBy], references: [id])

  @@index([status])
  @@index([contentType, contentId])
  @@index([reporterId])
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
}

// Conversations (private messages)
model Conversation {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages      ConversationMessage[]
  participants  ConversationParticipant[]
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime?
  isOwner        Boolean  @default(false)

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model ConversationMessage {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String   @db.Text
  createdAt      DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("UserSentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

// Follow / Ignore
model Follow {
  id           String   @id @default(cuid())
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())

  follower     User @relation("UserFollowsFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following    User @relation("UserFollowsFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
}

model Ignore {
  id         String   @id @default(cuid())
  ignorerId  String
  ignoredId  String
  createdAt  DateTime @default(now())

  ignorer    User @relation("UserIgnoresIgnorer", fields: [ignorerId], references: [id], onDelete: Cascade)
  ignored    User @relation("UserIgnoresIgnored", fields: [ignoredId], references: [id], onDelete: Cascade)

  @@unique([ignorerId, ignoredId])
  @@index([ignoredId])
}

// Drafts for posts/comments
model Draft {
  id         String   @id @default(cuid())
  userId     String
  type       String   // 'post' | 'comment'
  categoryId String?
  postId     String?
  content    String   @db.Text
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id])
  node       Node?     @relation("NodeDrafts", fields: [categoryId], references: [id], map: "Draft_nodeId_fkey")

  @@index([userId])
}

// Role and Permission System
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?  @default("#6b7280") // Default gray color
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  permissions RolePermission[]
  secondaryUsers UserSecondaryRole[]
  nodePermissions NodePermission[]
  upgradesFrom RoleUpgrade[] @relation("RoleUpgradeFrom")
  upgradesTo   RoleUpgrade[] @relation("RoleUpgradeTo")

  @@index([name])
  @@index([isSystem])
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  category    String?  // Group permissions by category (e.g., "posts", "users", "admin")
  isSystem    Boolean  @default(false) // System permissions cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles       RolePermission[]

  @@index([name])
  @@index([category])
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// Advanced User Management Models

// Secondary roles for users (multiple roles support)
model UserSecondaryRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  grantedBy String?
  grantedAt DateTime @default(now())
  expiresAt DateTime?

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// User session tracking
model UserSession {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String   @unique
  ipAddress   String
  userAgent   String?  @db.Text
  country     String?
  city        String?
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ipAddress])
  @@index([isActive])
}

// IP address logging for users
model UserIpLog {
  id        String   @id @default(cuid())
  userId    String
  ipAddress String
  country   String?
  city      String?
  action    String   // 'login', 'register', 'post', 'view'
  timestamp DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ipAddress])
  @@index([timestamp])
}

// Warning system
model Warning {
  id          String   @id @default(cuid())
  warningId   Int      @unique @default(autoincrement())
  userId      String
  givenById   String
  title       String
  reason      String   @db.Text
  points      Int      @default(1)
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  user        User @relation("UserWarnings", fields: [userId], references: [id], onDelete: Cascade)
  givenBy     User @relation("WarningGivenBy", fields: [givenById], references: [id])

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
}

// Trophy System
model Trophy {
  id          String   @id @default(cuid())
  trophyId    Int      @unique @default(autoincrement())
  name        String
  description String?  @db.Text
  criteria    String   @db.Text  // JSON criteria for earning
  icon        String?
  points      Int      @default(0)
  isActive    Boolean  @default(true)
  category    String?
  rarity      String   @default("common") // common, uncommon, rare, epic, legendary
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userTrophies UserTrophy[]

  @@index([isActive])
  @@index([category])
  @@index([rarity])
}

model UserTrophy {
  id        String   @id @default(cuid())
  userId    String
  trophyId  String
  earnedAt  DateTime @default(now())
  
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  trophy    Trophy @relation(fields: [trophyId], references: [id], onDelete: Cascade)

  @@unique([userId, trophyId])
  @@index([userId])
  @@index([earnedAt])
}

// Profile Posts (like visitor messages)
model ProfilePost {
  id        String   @id @default(cuid())
  profilePostId Int   @unique @default(autoincrement())
  targetUserId String
  authorId  String
  content   String   @db.Text
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  targetUser User @relation("ProfilePostTarget", fields: [targetUserId], references: [id], onDelete: Cascade)
  author     User @relation("ProfilePostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  comments   ProfilePostComment[]

  @@index([targetUserId])
  @@index([authorId])
  @@index([createdAt])
}

model ProfilePostComment {
  id            String   @id @default(cuid())
  profilePostId String
  authorId      String
  content       String   @db.Text
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  profilePost   ProfilePost @relation(fields: [profilePostId], references: [id], onDelete: Cascade)
  author        User        @relation("ProfilePostCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([profilePostId])
  @@index([authorId])
}

// Custom user fields
model CustomField {
  id          String   @id @default(cuid())
  fieldId     Int      @unique @default(autoincrement())
  name        String
  displayName String
  description String?
  fieldType   String   // text, textarea, select, checkbox, radio, date
  options     Json?    // For select/radio fields
  isRequired  Boolean  @default(false)
  isActive    Boolean  @default(true)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userFields  UserCustomField[]

  @@index([isActive])
  @@index([position])
}

model UserCustomField {
  id      String @id @default(cuid())
  userId  String
  fieldId String
  value   String @db.Text

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  field   CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([userId, fieldId])
  @@index([userId])
}

// User upgrades/premium features
model UserUpgrade {
  id          String   @id @default(cuid())
  userId      String
  upgradeType String   // premium, vip, etc.
  startDate   DateTime @default(now())
  endDate     DateTime?
  isActive    Boolean  @default(true)
  features    Json?    // JSON of enabled features
  createdAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([endDate])
}

// Enhanced Forum Models

// Enhanced Category model (now called Node for flexibility)
model Node {
  id              String   @id @default(cuid())
  nodeId          Int      @unique @default(autoincrement())
  name            String
  description     String?  @db.Text
  nodeType        String   @default("category") // category, page, link
  displayOrder    Int      @default(0)
  parentId        String?
  
  // Appearance
  icon            String?
  color           String?
  style           Json?    // Additional styling options
  
  // Permissions & Settings
  isActive        Boolean  @default(true)
  isPrivate       Boolean  @default(false)
  requirePrefix   Boolean  @default(false)
  allowPolls      Boolean  @default(true)
  allowUploads    Boolean  @default(true)
  allowBBCode     Boolean  @default(true)
  
  // Statistics
  postCount       Int      @default(0)
  threadCount     Int      @default(0)
  lastPostAt      DateTime?
  lastPostId      String?
  lastPostTitle   String?
  lastPostAuthor  String?
  
  // SEO & External
  pageTitle       String?
  metaDescription String?
  externalUrl     String?  // For link nodes
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  parent          Node?    @relation("NodeHierarchy", fields: [parentId], references: [id])
  children        Node[]   @relation("NodeHierarchy")
  enhancedPosts   EnhancedPost[] @relation("NodeEnhancedPosts")
  prefixes        ThreadPrefix[] @relation("NodePrefixes")
  drafts          Draft[]  @relation("NodeDrafts")
  permissions     NodePermission[]
  moderators      NodeModerator[]

  @@index([nodeType])
  @@index([displayOrder])
  @@index([parentId])
  @@index([isActive])
}

// Node-specific permissions
model NodePermission {
  id           String @id @default(cuid())
  nodeId       String
  userId       String?
  roleId       String?
  permission   String  // view, post, reply, upload, poll, moderate, etc.
  value        String  @default("allow") // allow, deny, inherit
  
  node         Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  user         User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  role         Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([nodeId, userId, permission])
  @@unique([nodeId, roleId, permission])
  @@index([nodeId])
  @@index([userId])
  @@index([roleId])
}

// Node moderators
model NodeModerator {
  id       String @id @default(cuid())
  nodeId   String
  userId   String
  grantedAt DateTime @default(now())
  
  node     Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  user     User @relation("UserNodeModerator", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([nodeId, userId])
  @@index([nodeId])
  @@index([userId])
}

// Enhanced Post model
model EnhancedPost {
  id              String   @id @default(cuid())
  postId          Int      @unique @default(autoincrement())
  title           String
  content         String   @db.Text
  contentParsed   String?  @db.Text  // Parsed BB code/markdown
  nodeId          String
  authorId        String
  authorUsername  String
  
  // Thread properties
  threadType      String   @default("discussion") // discussion, question, article, poll
  isPinned        Boolean  @default(false)
  isSticky        Boolean  @default(false) // Global sticky
  isFeatured      Boolean  @default(false)
  isLocked        Boolean  @default(false)
  isDeleted       Boolean  @default(false)
  deletedReason   String?
  deletedById     String?
  
  // Engagement
  views           Int      @default(0)
  uniqueViews     Int      @default(0)
  rating          Float?   // Average rating if enabled
  ratingCount     Int      @default(0)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastReplyAt     DateTime?
  bumpedAt        DateTime?
  
  // Relations
  node            Node     @relation("NodeEnhancedPosts", fields: [nodeId], references: [id], onDelete: Cascade)
  author          User     @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  deletedBy       User?    @relation("PostDeletedBy", fields: [deletedById], references: [id])
  
  replies         PostReply[]
  attachments     PostAttachment[]
  ratings         PostRating[]
  views_log       PostView[]
  prefixId        String?
  prefix          ThreadPrefix? @relation(fields: [prefixId], references: [id])

  @@index([nodeId])
  @@index([authorId])
  @@index([threadType])
  @@index([isPinned, isSticky])
  @@index([lastReplyAt])
  @@index([rating])
}

// Post replies (enhanced comments)
model PostReply {
  id              String   @id @default(cuid())
  replyId         Int      @unique @default(autoincrement())
  postId          String
  authorId        String
  authorUsername  String
  content         String   @db.Text
  contentParsed   String?  @db.Text
  
  // Threading
  parentId        String?
  position        Int      @default(0)
  
  // Status
  isDeleted       Boolean  @default(false)
  deletedReason   String?
  deletedById     String?
  
  // Engagement
  rating          Float?
  ratingCount     Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  post            EnhancedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User         @relation("ReplyAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  deletedBy       User?        @relation("ReplyDeletedBy", fields: [deletedById], references: [id])
  parent          PostReply?   @relation("ReplyThread", fields: [parentId], references: [id])
  children        PostReply[]  @relation("ReplyThread")
  
  attachments     PostAttachment[]
  ratings         PostRating[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([position])
}

// Post/Reply ratings
model PostRating {
  id       String @id @default(cuid())
  userId   String
  postId   String?
  replyId  String?
  rating   Int    // 1-5 stars or thumbs up/down
  createdAt DateTime @default(now())

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     EnhancedPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply    PostReply?    @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, replyId])
  @@index([postId])
  @@index([replyId])
}

// Post attachments
model PostAttachment {
  id           String @id @default(cuid())
  attachmentId Int    @unique @default(autoincrement())
  postId       String?
  replyId      String?
  filename     String
  originalName String
  mimeType     String
  fileSize     Int
  downloadCount Int   @default(0)
  uploadedAt   DateTime @default(now())

  post         EnhancedPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply        PostReply?    @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([replyId])
  @@index([uploadedAt])
}

// Simple attachments for regular posts
model PostSimpleAttachment {
  id           String @id @default(cuid())
  attachmentId Int    @unique @default(autoincrement())
  postId       String
  filename     String
  originalName String
  mimeType     String
  fileSize     Int
  downloadCount Int   @default(0)
  uploadedAt   DateTime @default(now())

  post         Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([uploadedAt])
}

// Post view tracking
model PostView {
  id        String   @id @default(cuid())
  postId    String
  userId    String?
  ipAddress String
  viewedAt  DateTime @default(now())

  post      EnhancedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@unique([postId, ipAddress])
  @@index([postId])
  @@index([viewedAt])
}

// BB Code system
model BBCode {
  id          String   @id @default(cuid())
  tag         String   @unique
  replacement String   @db.Text
  example     String?
  description String?
  isActive    Boolean  @default(true)
  hasOption   Boolean  @default(false)
  parseContent Boolean @default(true)
  createdAt   DateTime @default(now())

  @@index([isActive])
}

// Post templates
model PostTemplate {
  id          String   @id @default(cuid())
  templateId  Int      @unique @default(autoincrement())
  name        String
  description String?
  content     String   @db.Text
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([category])
}

// News feed for announcements
model NewsFeed {
  id          String   @id @default(cuid())
  newsId      Int      @unique @default(autoincrement())
  title       String
  content     String   @db.Text
  authorId    String
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User @relation("NewsAuthor", fields: [authorId], references: [id])

  @@index([isPublished])
  @@index([publishedAt])
}

// Enhanced role system
model RoleUpgrade {
  id          String   @id @default(cuid())
  name        String
  description String?
  fromRoleId  String
  toRoleId    String
  criteria    Json     // Requirements for upgrade
  isAutomatic Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  fromRole    Role @relation("RoleUpgradeFrom", fields: [fromRoleId], references: [id])
  toRole      Role @relation("RoleUpgradeTo", fields: [toRoleId], references: [id])

  @@index([isActive])
  @@index([isAutomatic])
}