// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  userId        Int       @unique @default(autoincrement()) // Custom sequential user ID
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastUsernameChangeAt DateTime?

  // Forum-specific fields
  bio           String?
  postCount     Int       @default(0)
  reputation    Int       @default(0)
  isActive      Boolean   @default(true)
  preferences   Json?     @default("{\"theme\": \"system\", \"notifications\": true, \"emailUpdates\": true}")

  // Advanced User Management
  title         String?   // Custom user title
  location      String?
  occupation    String?
  website       String?
  birthday      DateTime?
  timezone      String?
  signature     String?   @db.Text
  aboutMe       String?   @db.Text
  
  // User Status & Restrictions
  isBanned      Boolean   @default(false)
  bannedUntil   DateTime?
  bannedReason  String?
  bannedById    String?
  banCount      Int       @default(0)
  warningPoints Int       @default(0)
  isEmailBouncing Boolean @default(false)
  
  // Activity & Engagement
  lastActivity  DateTime  @default(now())
  messageCount  Int       @default(0)
  likeCount     Int       @default(0)
  trophyPoints  Int       @default(0)
  profileViews  Int       @default(0)
  
  // Privacy & Security
  privacySettings Json?   @default("{\"showOnline\": true, \"receiveMessages\": true, \"showEmail\": false}")
  notificationPreferences Json? @default("{\"mentions\":{\"realtime\":true},\"replies\":{\"realtime\":true},\"follows\":{\"realtime\":true},\"likes\":{\"realtime\":true},\"messages\":{\"realtime\":true},\"system\":{\"realtime\":true}}")
  
  // Role and permissions
  roleId        String?   // Default role will be set by application logic
  role          Role?     @relation(fields: [roleId], references: [id])
  secondaryRoles UserSecondaryRole[]

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  featuredPosts Post[]    @relation("FeaturedByUser")
  comments      Comment[]
  likes         Like[]
  
  // New relations
  watches       Watch[]
  reports       Report[] @relation("ReportReporter")
  resolvedReports Report[] @relation("ReportResolver")
  notifications Notification[]
  notificationsFrom Notification[] @relation("NotificationFromUser")

  // Reactions & Bookmarks
  reactions     Reaction[]
  bookmarks     Bookmark[]
  pollVotes     PollVote[]

  // Social graph & messaging
  follows       Follow[]       @relation("UserFollowsFollower")
  following     Follow[]       @relation("UserFollowsFollowing")
  ignores       Ignore[]       @relation("UserIgnoresIgnorer")
  ignoredBy     Ignore[]       @relation("UserIgnoresIgnored")
  conversations ConversationParticipant[]
  drafts        Draft[]
  sentMessages  ConversationMessage[] @relation("UserSentMessages")
  messageReactions MessageReaction[]
  typingIndicators TypingIndicator[]

  // Advanced User Management Relations
  bannedBy      User?          @relation("UserBannedBy", fields: [bannedById], references: [id])
  bannedUsers   User[]         @relation("UserBannedBy")
  userSessions  UserSession[]
  userIpLogs    UserIpLog[]
  warnings      Warning[]      @relation("UserWarnings")
  givenWarnings Warning[]      @relation("WarningGivenBy")
  userTrophies  UserTrophy[]
  profilePosts  ProfilePost[]  @relation("ProfilePostTarget")
  sentProfilePosts ProfilePost[] @relation("ProfilePostAuthor")
  profilePostComments ProfilePostComment[] @relation("ProfilePostCommentAuthor")
  customFields  UserCustomField[]
  userUpgrades  UserUpgrade[]
  
  // Enhanced forum relations
  authoredPosts EnhancedPost[] @relation("PostAuthor")
  deletedPosts  EnhancedPost[] @relation("PostDeletedBy")
  authoredReplies PostReply[]  @relation("ReplyAuthor")
  deletedReplies PostReply[]   @relation("ReplyDeletedBy")
  postRatings   PostRating[]
  postViews     PostView[]
  newsArticles  NewsFeed[]     @relation("NewsAuthor")
  
  // Social features relations
  activityFeed  ActivityFeed[] @relation("ActivityFeedUser")
  actorActivity ActivityFeed[] @relation("ActivityFeedActor")
  mentions      Mention[]      @relation("MentionUser")
  mentionsMade  Mention[]      @relation("MentionMentioner")
  blockedUsers  UserBlock[]    @relation("UserBlockBlocker")
  blockedBy     UserBlock[]    @relation("UserBlockBlocked")
  socialInteractions SocialInteraction[] @relation("SocialInteractionUser")
  socialInteractionsTarget SocialInteraction[] @relation("SocialInteractionTarget")
  
  // Node permissions
  nodePermissions NodePermission[]
  moderatedNodes NodeModerator[] @relation("UserNodeModerator")

  // Search and discovery
  searchQueries         SearchQuery[] @relation("SearchQueryUser")
  contentRecommendations ContentRecommendation[] @relation("ContentRecommendationUser")

  // Analytics and experiments
  analyticsEvents       AnalyticsEvent[] @relation("AnalyticsEventUser")
  userEngagement        UserEngagement[] @relation("UserEngagementUser")
  experimentsCreated    Experiment[] @relation("ExperimentCreator")
  experimentParticipation UserExperiment[] @relation("UserExperimentUser")

  // Content management relations
  scheduledPosts        ScheduledPost[] @relation("ScheduledPostAuthor")
  contentVersions       ContentVersion[] @relation("ContentVersionAuthor")
  moderationRulesCreated ModerationRule[] @relation("ModerationRuleCreator")
  moderationLogs        ModerationLog[] @relation("ModerationLogModerator")
  contentTemplates      ContentTemplate[] @relation("TemplateCreator")
  contentApprovalsSubmitted ContentApproval[] @relation("ContentApprovalSubmitter")
  contentApprovalsReviewed ContentApproval[] @relation("ContentApprovalReviewer")
  contentFlagsSubmitted ContentFlag[] @relation("ContentFlagFlagger")
  contentFlagsReviewed  ContentFlag[] @relation("ContentFlagReviewer")

  // Advanced User Management relations
  verifications         UserVerification[] @relation("UserVerifications")
  verificationsIssued   UserVerification[] @relation("VerificationVerifiedBy")
  bans                  UserBan[] @relation("UserBans")
  bansIssued            UserBan[] @relation("BansIssued")
  banAppeals            BanAppeal[] @relation("UserBanAppeals")
  banAppealsReviewed    BanAppeal[] @relation("BanAppealsReviewed")
  warningsReceived      UserWarning[] @relation("UserWarningsReceived")
  warningsIssued        UserWarning[] @relation("UserWarningsIssued")
  activities            UserActivity[] @relation("UserActivities")
  profile               UserProfile? @relation("UserProfile")
  settings              UserSettings? @relation("UserSettings")
  loginAttempts         UserLoginAttempt[] @relation("UserLoginAttempts")
  reputationHistory     UserReputationHistory[] @relation("UserReputationHistory")
  reputationAwarded     UserReputationHistory[] @relation("ReputationAwarded")
  badgesEarned          UserBadgeEarned[] @relation("UserBadgesEarned")
  badgesAwarded         UserBadgeEarned[] @relation("BadgesAwarded")

  // Indexes for case-insensitive queries
  @@index([username], map: "username_ci_index")
  @@index([roleId])
  @@index([isBanned])
  @@index([lastActivity])
  @@index([warningPoints])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Legacy Category model (keeping for backward compatibility)
model Category {
  id          String   @id @default(cuid())
  categoryId  Int      @unique @default(autoincrement()) // Custom sequential category ID
  name        String
  description String?
  icon        String?
  color       String?
  postCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       Post[]
  prefixes    ThreadPrefix[]
  drafts      Draft[]
  scheduledPosts ScheduledPost[] @relation("ScheduledPostCategory")
  contentTemplates ContentTemplate[] @relation("TemplateCategory")
}

model Post {
  id              String   @id @default(cuid())
  postId          Int      @unique @default(autoincrement()) // Custom sequential post ID
  title           String
  content         String   @db.Text
  categoryId      String
  authorId        String
  authorUsername  String   // Store username for faster queries
  isPinned        Boolean  @default(false)
  isFeatured      Boolean  @default(false)
  featuredAt      DateTime?
  featuredById    String?
  isLocked        Boolean  @default(false)
  views           Int      @default(0)
  likes           Int      @default(0)
  replies         Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Content Management fields
  status          String   @default("PUBLISHED") // DRAFT, PENDING, PUBLISHED, REJECTED, ARCHIVED
  metadata        Json?    @default("{}")
  tags            String[] @default([])

  // Relations
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  featuredBy      User?    @relation("FeaturedByUser", fields: [featuredById], references: [id])
  comments        Comment[]
  postLikes       Like[]   @relation("PostLikes")
  notifications   Notification[]

  postTags        PostTag[]
  watches         Watch[]
  reactions       Reaction[]
  bookmarks       Bookmark[]
  poll            Poll?
  prefixId        String?
  prefix          ThreadPrefix? @relation(fields: [prefixId], references: [id])
  attachments     PostSimpleAttachment[]
  scheduledPost   ScheduledPost? @relation("ScheduledToPost")
  
  @@index([isFeatured, featuredAt])
  @@index([status])
}

model Comment {
  id              String   @id @default(cuid())
  commentId       Int      @unique @default(autoincrement()) // Custom sequential comment ID
  postId          String
  authorId        String
  authorUsername  String   // Store username for faster queries
  content         String   @db.Text
  parentId        String?  // For nested replies
  likes           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent          Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  commentLikes    Like[]   @relation("CommentLikes")
  reactions       Reaction[]
  notifications   Notification[]
}

model Like {
  id        String   @id @default(cuid())
  likeId    Int      @unique @default(autoincrement()) // Custom sequential like ID
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

// Reactions (emoji/like variants)
model Reaction {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  type      String   // e.g. 'like','love','laugh','wow','sad','angry','custom:thumbsup'
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type])
  @@unique([userId, commentId, type])
  @@index([postId])
  @@index([commentId])
}

// Bookmarks (thread subscriptions separate from Watches)
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Polls
model Poll {
  id         String   @id @default(cuid())
  postId     String   @unique
  question   String
  isMultiple Boolean  @default(false)
  closesAt   DateTime?
  createdAt  DateTime @default(now())

  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  options    PollOption[]
  votes      PollVote[]
}

model PollOption {
  id        String   @id @default(cuid())
  pollId    String
  text      String
  votes     Int      @default(0)
  pollVotes PollVote[]

  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@index([pollId])
}

model PollVote {
  id        String   @id @default(cuid())
  pollId    String
  optionId  String
  userId    String
  createdAt DateTime @default(now())

  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, optionId])
  @@index([userId])
}

// Tags
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     PostTag[]

  @@index([slug])
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([tagId])
}

// Thread prefixes
model ThreadPrefix {
  id         String   @id @default(cuid())
  name       String
  color      String?
  categoryId String?
  createdAt  DateTime @default(now())

  category   Category? @relation(fields: [categoryId], references: [id])
  nodes      Node[]    @relation("NodePrefixes")
  posts      Post[]
  enhancedPosts EnhancedPost[]
  scheduledPosts ScheduledPost[] @relation("ScheduledPostPrefix")

  @@index([categoryId])
}

// Watch/Subscribe System
model Watch {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Content Reports
model Report {
  id          String   @id @default(cuid())
  reportId    Int      @unique @default(autoincrement())
  reporterId  String
  contentType String
  contentId   String
  reason      String
  description String?
  status      String   @default("pending")
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reporter    User @relation("ReportReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  resolver    User? @relation("ReportResolver", fields: [resolvedBy], references: [id])

  @@index([status])
  @@index([contentType, contentId])
  @@index([reporterId])
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // mention, reply, follow, like, trophy, message, system, warning, ban
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  readAt    DateTime?
  fromUserId String?
  postId    String?
  commentId String?
  conversationId String?
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromUser  User? @relation("NotificationFromUser", fields: [fromUserId], references: [id], onDelete: SetNull)
  post      Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@index([type])
}

// Conversations (private messages)
model Conversation {
  id          String   @id @default(cuid())
  title       String?
  type        String   @default("direct") // direct, group
  description String?
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastMessageAt DateTime?

  messages      ConversationMessage[]
  participants  ConversationParticipant[]
  notifications Notification[]
  typingIndicators TypingIndicator[]

  @@index([type])
  @@index([lastMessageAt])
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime?
  isOwner        Boolean  @default(false)
  isAdmin        Boolean  @default(false)
  isMuted        Boolean  @default(false)
  leftAt         DateTime?

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model ConversationMessage {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String   @db.Text
  type           String   @default("text") // text, image, file, system, voice
  status         String   @default("sent") // sent, delivered, read
  editedAt       DateTime?
  deletedAt      DateTime?
  replyToId      String?
  createdAt      DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("UserSentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo        ConversationMessage? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        ConversationMessage[] @relation("MessageReplies")
  
  attachments    MessageAttachment[]
  reactions      MessageReaction[]

  @@index([conversationId])
  @@index([senderId])
  @@index([status])
  @@index([createdAt])
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  fileName  String
  fileUrl   String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())

  message   ConversationMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message   ConversationMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model TypingIndicator {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  startedAt      DateTime @default(now())
  expiresAt      DateTime

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([expiresAt])
}

// Follow / Ignore
model Follow {
  id           String   @id @default(cuid())
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())

  follower     User @relation("UserFollowsFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following    User @relation("UserFollowsFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
}

model Ignore {
  id         String   @id @default(cuid())
  ignorerId  String
  ignoredId  String
  createdAt  DateTime @default(now())

  ignorer    User @relation("UserIgnoresIgnorer", fields: [ignorerId], references: [id], onDelete: Cascade)
  ignored    User @relation("UserIgnoresIgnored", fields: [ignoredId], references: [id], onDelete: Cascade)

  @@unique([ignorerId, ignoredId])
  @@index([ignoredId])
}

// Drafts for posts/comments
model Draft {
  id         String   @id @default(cuid())
  userId     String
  type       String   // 'post' | 'comment'
  categoryId String?
  postId     String?
  content    String   @db.Text
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id])
  node       Node?     @relation("NodeDrafts", fields: [categoryId], references: [id], map: "Draft_nodeId_fkey")

  @@index([userId])
}

// Role and Permission System
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?  @default("#6b7280") // Default gray color
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  permissions RolePermission[]
  secondaryUsers UserSecondaryRole[]
  nodePermissions NodePermission[]
  upgradesFrom RoleUpgrade[] @relation("RoleUpgradeFrom")
  upgradesTo   RoleUpgrade[] @relation("RoleUpgradeTo")

  @@index([name])
  @@index([isSystem])
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  category    String?  // Group permissions by category (e.g., "posts", "users", "admin")
  isSystem    Boolean  @default(false) // System permissions cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles       RolePermission[]

  @@index([name])
  @@index([category])
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// Advanced User Management Models

// Secondary roles for users (multiple roles support)
model UserSecondaryRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  grantedBy String?
  grantedAt DateTime @default(now())
  expiresAt DateTime?

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// User session tracking
model UserSession {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String   @unique
  ipAddress   String
  userAgent   String?  @db.Text
  country     String?
  city        String?
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ipAddress])
  @@index([isActive])
}

// IP address logging for users
model UserIpLog {
  id        String   @id @default(cuid())
  userId    String
  ipAddress String
  country   String?
  city      String?
  action    String   // 'login', 'register', 'post', 'view'
  timestamp DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ipAddress])
  @@index([timestamp])
}

// Warning system
model Warning {
  id          String   @id @default(cuid())
  warningId   Int      @unique @default(autoincrement())
  userId      String
  givenById   String
  title       String
  reason      String   @db.Text
  points      Int      @default(1)
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  user        User @relation("UserWarnings", fields: [userId], references: [id], onDelete: Cascade)
  givenBy     User @relation("WarningGivenBy", fields: [givenById], references: [id])

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
}

// Trophy System
model Trophy {
  id          String   @id @default(cuid())
  trophyId    Int      @unique @default(autoincrement())
  name        String
  description String?  @db.Text
  criteria    String   @db.Text  // JSON criteria for earning
  icon        String?
  points      Int      @default(0)
  isActive    Boolean  @default(true)
  category    String?
  rarity      String   @default("common") // common, uncommon, rare, epic, legendary
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userTrophies UserTrophy[]

  @@index([isActive])
  @@index([category])
  @@index([rarity])
}

model UserTrophy {
  id        String   @id @default(cuid())
  userId    String
  trophyId  String
  earnedAt  DateTime @default(now())
  
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  trophy    Trophy @relation(fields: [trophyId], references: [id], onDelete: Cascade)

  @@unique([userId, trophyId])
  @@index([userId])
  @@index([earnedAt])
}

// Profile Posts (like visitor messages)
model ProfilePost {
  id        String   @id @default(cuid())
  profilePostId Int   @unique @default(autoincrement())
  targetUserId String
  authorId  String
  content   String   @db.Text
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  targetUser User @relation("ProfilePostTarget", fields: [targetUserId], references: [id], onDelete: Cascade)
  author     User @relation("ProfilePostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  comments   ProfilePostComment[]

  @@index([targetUserId])
  @@index([authorId])
  @@index([createdAt])
}

model ProfilePostComment {
  id            String   @id @default(cuid())
  profilePostId String
  authorId      String
  content       String   @db.Text
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  profilePost   ProfilePost @relation(fields: [profilePostId], references: [id], onDelete: Cascade)
  author        User        @relation("ProfilePostCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([profilePostId])
  @@index([authorId])
}

// Custom user fields
model CustomField {
  id          String   @id @default(cuid())
  fieldId     Int      @unique @default(autoincrement())
  name        String
  displayName String
  description String?
  fieldType   String   // text, textarea, select, checkbox, radio, date
  options     Json?    // For select/radio fields
  isRequired  Boolean  @default(false)
  isActive    Boolean  @default(true)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userFields  UserCustomField[]

  @@index([isActive])
  @@index([position])
}

model UserCustomField {
  id      String @id @default(cuid())
  userId  String
  fieldId String
  value   String @db.Text

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  field   CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([userId, fieldId])
  @@index([userId])
}

// User upgrades/premium features
model UserUpgrade {
  id          String   @id @default(cuid())
  userId      String
  upgradeType String   // premium, vip, etc.
  startDate   DateTime @default(now())
  endDate     DateTime?
  isActive    Boolean  @default(true)
  features    Json?    // JSON of enabled features
  createdAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([endDate])
}

// Enhanced Forum Models

// Enhanced Category model (now called Node for flexibility)
model Node {
  id              String   @id @default(cuid())
  nodeId          Int      @unique @default(autoincrement())
  name            String
  description     String?  @db.Text
  nodeType        String   @default("category") // category, page, link
  displayOrder    Int      @default(0)
  parentId        String?
  
  // Appearance
  icon            String?
  color           String?
  style           Json?    // Additional styling options
  
  // Permissions & Settings
  isActive        Boolean  @default(true)
  isPrivate       Boolean  @default(false)
  requirePrefix   Boolean  @default(false)
  allowPolls      Boolean  @default(true)
  allowUploads    Boolean  @default(true)
  allowBBCode     Boolean  @default(true)
  
  // Statistics
  postCount       Int      @default(0)
  threadCount     Int      @default(0)
  lastPostAt      DateTime?
  lastPostId      String?
  lastPostTitle   String?
  lastPostAuthor  String?
  
  // SEO & External
  pageTitle       String?
  metaDescription String?
  externalUrl     String?  // For link nodes
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  parent          Node?    @relation("NodeHierarchy", fields: [parentId], references: [id])
  children        Node[]   @relation("NodeHierarchy")
  enhancedPosts   EnhancedPost[] @relation("NodeEnhancedPosts")
  prefixes        ThreadPrefix[] @relation("NodePrefixes")
  drafts          Draft[]  @relation("NodeDrafts")
  permissions     NodePermission[]
  moderators      NodeModerator[]

  @@index([nodeType])
  @@index([displayOrder])
  @@index([parentId])
  @@index([isActive])
}

// Node-specific permissions
model NodePermission {
  id           String @id @default(cuid())
  nodeId       String
  userId       String?
  roleId       String?
  permission   String  // view, post, reply, upload, poll, moderate, etc.
  value        String  @default("allow") // allow, deny, inherit
  
  node         Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  user         User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  role         Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([nodeId, userId, permission])
  @@unique([nodeId, roleId, permission])
  @@index([nodeId])
  @@index([userId])
  @@index([roleId])
}

// Node moderators
model NodeModerator {
  id       String @id @default(cuid())
  nodeId   String
  userId   String
  grantedAt DateTime @default(now())
  
  node     Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  user     User @relation("UserNodeModerator", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([nodeId, userId])
  @@index([nodeId])
  @@index([userId])
}

// Enhanced Post model
model EnhancedPost {
  id              String   @id @default(cuid())
  postId          Int      @unique @default(autoincrement())
  title           String
  content         String   @db.Text
  contentParsed   String?  @db.Text  // Parsed BB code/markdown
  nodeId          String
  authorId        String
  authorUsername  String
  
  // Thread properties
  threadType      String   @default("discussion") // discussion, question, article, poll
  isPinned        Boolean  @default(false)
  isSticky        Boolean  @default(false) // Global sticky
  isFeatured      Boolean  @default(false)
  isLocked        Boolean  @default(false)
  isDeleted       Boolean  @default(false)
  deletedReason   String?
  deletedById     String?
  
  // Engagement
  views           Int      @default(0)
  uniqueViews     Int      @default(0)
  rating          Float?   // Average rating if enabled
  ratingCount     Int      @default(0)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastReplyAt     DateTime?
  bumpedAt        DateTime?
  
  // Relations
  node            Node     @relation("NodeEnhancedPosts", fields: [nodeId], references: [id], onDelete: Cascade)
  author          User     @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  deletedBy       User?    @relation("PostDeletedBy", fields: [deletedById], references: [id])
  
  replies         PostReply[]
  attachments     PostAttachment[]
  ratings         PostRating[]
  views_log       PostView[]
  prefixId        String?
  prefix          ThreadPrefix? @relation(fields: [prefixId], references: [id])

  @@index([nodeId])
  @@index([authorId])
  @@index([threadType])
  @@index([isPinned, isSticky])
  @@index([lastReplyAt])
  @@index([rating])
}

// Post replies (enhanced comments)
model PostReply {
  id              String   @id @default(cuid())
  replyId         Int      @unique @default(autoincrement())
  postId          String
  authorId        String
  authorUsername  String
  content         String   @db.Text
  contentParsed   String?  @db.Text
  
  // Threading
  parentId        String?
  position        Int      @default(0)
  
  // Status
  isDeleted       Boolean  @default(false)
  deletedReason   String?
  deletedById     String?
  
  // Engagement
  rating          Float?
  ratingCount     Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  post            EnhancedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User         @relation("ReplyAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  deletedBy       User?        @relation("ReplyDeletedBy", fields: [deletedById], references: [id])
  parent          PostReply?   @relation("ReplyThread", fields: [parentId], references: [id])
  children        PostReply[]  @relation("ReplyThread")
  
  attachments     PostAttachment[]
  ratings         PostRating[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([position])
}

// Post/Reply ratings
model PostRating {
  id       String @id @default(cuid())
  userId   String
  postId   String?
  replyId  String?
  rating   Int    // 1-5 stars or thumbs up/down
  createdAt DateTime @default(now())

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     EnhancedPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply    PostReply?    @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, replyId])
  @@index([postId])
  @@index([replyId])
}

// Post attachments
model PostAttachment {
  id           String @id @default(cuid())
  attachmentId Int    @unique @default(autoincrement())
  postId       String?
  replyId      String?
  filename     String
  originalName String
  mimeType     String
  fileSize     Int
  downloadCount Int   @default(0)
  uploadedAt   DateTime @default(now())

  post         EnhancedPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply        PostReply?    @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([replyId])
  @@index([uploadedAt])
}

// Simple attachments for regular posts
model PostSimpleAttachment {
  id           String @id @default(cuid())
  attachmentId Int    @unique @default(autoincrement())
  postId       String
  filename     String
  originalName String
  mimeType     String
  fileSize     Int
  downloadCount Int   @default(0)
  uploadedAt   DateTime @default(now())

  post         Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([uploadedAt])
}

// Post view tracking
model PostView {
  id        String   @id @default(cuid())
  postId    String
  userId    String?
  ipAddress String
  viewedAt  DateTime @default(now())

  post      EnhancedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@unique([postId, ipAddress])
  @@index([postId])
  @@index([viewedAt])
}

// BB Code system
model BBCode {
  id          String   @id @default(cuid())
  tag         String   @unique
  replacement String   @db.Text
  example     String?
  description String?
  isActive    Boolean  @default(true)
  hasOption   Boolean  @default(false)
  parseContent Boolean @default(true)
  createdAt   DateTime @default(now())

  @@index([isActive])
}

// Post templates
model PostTemplate {
  id          String   @id @default(cuid())
  templateId  Int      @unique @default(autoincrement())
  name        String
  description String?
  content     String   @db.Text
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([category])
}

// News feed for announcements
model NewsFeed {
  id          String   @id @default(cuid())
  newsId      Int      @unique @default(autoincrement())
  title       String
  content     String   @db.Text
  authorId    String
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User @relation("NewsAuthor", fields: [authorId], references: [id])

  @@index([isPublished])
  @@index([publishedAt])
}

// Activity feed system for social features
model ActivityFeed {
  id           String   @id @default(cuid())
  userId       String   // Who this activity is for (recipient)
  actorId      String   // Who performed the action
  type         String   // 'follow', 'post_created', 'comment_created', 'like_given', 'mention', etc.
  entityType   String   // 'user', 'post', 'comment', etc.
  entityId     String?  // ID of the entity involved
  metadata     Json?    // Additional data (post title, comment content preview, etc.)
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())

  user         User @relation("ActivityFeedUser", fields: [userId], references: [id], onDelete: Cascade)
  actor        User @relation("ActivityFeedActor", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([actorId])
  @@index([type])
  @@index([isRead])
}

// User mentions in posts and comments
model Mention {
  id           String   @id @default(cuid())
  userId       String   // Who was mentioned
  mentionerId  String   // Who mentioned them
  entityType   String   // 'post', 'comment', 'message'
  entityId     String   // ID of the post/comment/message
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())

  user         User @relation("MentionUser", fields: [userId], references: [id], onDelete: Cascade)
  mentioner    User @relation("MentionMentioner", fields: [mentionerId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([mentionerId])
  @@index([entityType, entityId])
}

// User blocking system (enhanced from ignore)
model UserBlock {
  id          String   @id @default(cuid())
  blockerId   String   // Who blocked
  blockedId   String   // Who was blocked
  reason      String?  // Optional reason for blocking
  createdAt   DateTime @default(now())

  blocker     User @relation("UserBlockBlocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked     User @relation("UserBlockBlocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockedId])
}

// Social interaction logs
model SocialInteraction {
  id           String   @id @default(cuid())
  userId       String   // Who performed the action
  targetUserId String?  // Target user (for follows, blocks, etc.)
  type         String   // 'profile_view', 'follow', 'unfollow', 'block', 'unblock'
  metadata     Json?    // Additional context
  createdAt    DateTime @default(now())

  user         User @relation("SocialInteractionUser", fields: [userId], references: [id], onDelete: Cascade)
  targetUser   User? @relation("SocialInteractionTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([targetUserId])
  @@index([createdAt])
}

// Search analytics and discovery features
model SearchQuery {
  id            String   @id @default(cuid())
  userId        String?  // Optional - can track anonymous searches
  query         String   // The search term
  filters       Json?    // Applied filters (category, tags, date range, etc.)
  resultCount   Int      @default(0)
  clickedResult String?  // Which result was clicked
  searchType    String   @default("general") // 'general', 'posts', 'users', 'tags'
  metadata      Json?    // Additional context
  createdAt     DateTime @default(now())

  user          User? @relation("SearchQueryUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([query])
  @@index([userId])
  @@index([searchType])
  @@index([createdAt])
}

// Trending topics and hashtags
model TrendingTopic {
  id            String   @id @default(cuid())
  topic         String   @unique // The trending topic/hashtag
  mentions      Int      @default(1) // Number of mentions
  score         Float    @default(0) // Trending score
  category      String?  // Optional category
  timeframe     String   @default("24h") // '1h', '24h', '7d', '30d'
  lastMentioned DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([score])
  @@index([timeframe, score])
  @@index([lastMentioned])
}

// Content indexing for full-text search
model SearchIndex {
  id          String   @id @default(cuid())
  contentType String   // 'post', 'comment', 'user', 'category'
  contentId   String   // ID of the content
  title       String?  // Title (for posts, categories)
  content     String   @db.Text // Full content for search
  keywords    String[] // Extracted keywords
  metadata    Json?    // Additional searchable metadata
  searchVector String? @db.Text // For PostgreSQL full-text search
  updatedAt   DateTime @updatedAt

  @@unique([contentType, contentId])
  @@index([contentType])
  @@index([keywords])
}

// Search suggestions and autocomplete
model SearchSuggestion {
  id            String   @id @default(cuid())
  suggestion    String   @unique
  searchCount   Int      @default(1)
  resultCount   Int      @default(0)
  category      String?  // Optional category
  type          String   @default("query") // 'query', 'tag', 'user', 'category'
  lastUsed      DateTime @default(now())
  createdAt     DateTime @default(now())

  @@index([searchCount])
  @@index([suggestion])
  @@index([type])
}

// Popular and recommended content
model ContentRecommendation {
  id            String   @id @default(cuid())
  userId        String   // Who the recommendation is for
  contentType   String   // 'post', 'user', 'category', 'tag'
  contentId     String   // ID of recommended content
  score         Float    @default(0) // Recommendation score
  reason        String   // Why this was recommended
  metadata      Json?    // Additional context
  isViewed      Boolean  @default(false)
  isInteracted  Boolean  @default(false)
  createdAt     DateTime @default(now())

  user          User @relation("ContentRecommendationUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, score])
  @@index([contentType, contentId])
  @@index([createdAt])
}

// Enhanced role system
model RoleUpgrade {
  id          String   @id @default(cuid())
  name        String
  description String?
  fromRoleId  String
  toRoleId    String
  criteria    Json     // Requirements for upgrade
  isAutomatic Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  fromRole    Role @relation("RoleUpgradeFrom", fields: [fromRoleId], references: [id])
  toRole      Role @relation("RoleUpgradeTo", fields: [toRoleId], references: [id])

  @@index([isActive])
  @@index([isAutomatic])
}

// Analytics and insights models
model AnalyticsEvent {
  id          String   @id @default(cuid())
  eventType   String   // 'page_view', 'post_create', 'comment_create', 'user_register', etc.
  userId      String?  // Optional for anonymous events
  sessionId   String?  // Session tracking
  entityType  String?  // 'post', 'user', 'category', etc.
  entityId    String?  // ID of the entity
  properties  Json?    // Additional event properties
  userAgent   String?  // Browser/client info
  ipAddress   String?  // IP for geo analytics
  referrer    String?  // Where they came from
  pathname    String?  // Page they were on
  createdAt   DateTime @default(now())

  user        User? @relation("AnalyticsEventUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventType])
  @@index([userId])
  @@index([sessionId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@index([pathname])
}

// Daily aggregated metrics
model DailyMetrics {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  totalUsers        Int      @default(0)
  activeUsers       Int      @default(0)
  newUsers          Int      @default(0)
  totalPosts        Int      @default(0)
  newPosts          Int      @default(0)
  totalComments     Int      @default(0)
  newComments       Int      @default(0)
  pageViews         Int      @default(0)
  uniqueVisitors    Int      @default(0)
  avgSessionTime    Float    @default(0) // in minutes
  bounceRate        Float    @default(0) // percentage
  topPosts          Json?    // Most popular posts
  topCategories     Json?    // Most active categories
  userGrowthRate    Float    @default(0) // percentage
  engagementRate    Float    @default(0) // percentage
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([date])
}

// User engagement tracking
model UserEngagement {
  id            String   @id @default(cuid())
  userId        String
  date          DateTime @db.Date
  sessionsCount Int      @default(0)
  totalTime     Int      @default(0) // in minutes
  postsCreated  Int      @default(0)
  commentsCreated Int    @default(0)
  likesGiven    Int      @default(0)
  likesReceived Int      @default(0)
  messagesRead  Int      @default(0)
  messagesSent  Int      @default(0)
  pageViews     Int      @default(0)
  lastActivity  DateTime @default(now())
  createdAt     DateTime @default(now())

  user          User @relation("UserEngagementUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([date])
  @@index([lastActivity])
}

// Content performance metrics
model ContentMetrics {
  id            String   @id @default(cuid())
  contentType   String   // 'post', 'comment', 'category'
  contentId     String
  date          DateTime @db.Date
  views         Int      @default(0)
  uniqueViews   Int      @default(0)
  likes         Int      @default(0)
  comments      Int      @default(0)
  shares        Int      @default(0)
  clickRate     Float    @default(0) // percentage
  engagementRate Float   @default(0) // percentage
  bounceRate    Float    @default(0) // percentage
  avgTimeSpent  Float    @default(0) // in minutes
  createdAt     DateTime @default(now())

  @@unique([contentType, contentId, date])
  @@index([contentType])
  @@index([date])
  @@index([views])
  @@index([engagementRate])
}

// Traffic sources and referrals
model TrafficSource {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  source      String   // 'direct', 'search', 'social', 'referral', etc.
  medium      String?  // 'organic', 'cpc', 'email', etc.
  campaign    String?  // UTM campaign
  referrer    String?  // Full referrer URL
  visitors    Int      @default(0)
  pageViews   Int      @default(0)
  sessions    Int      @default(0)
  bounceRate  Float    @default(0)
  avgSessionTime Float @default(0)
  conversions Int      @default(0) // registrations, etc.
  createdAt   DateTime @default(now())

  @@unique([date, source, medium, campaign, referrer])
  @@index([date])
  @@index([source])
  @@index([visitors])
}

// Performance monitoring
model PerformanceMetrics {
  id                String   @id @default(cuid())
  date              DateTime @db.Date
  avgResponseTime   Float    @default(0) // in milliseconds
  p95ResponseTime   Float    @default(0) // 95th percentile
  errorRate         Float    @default(0) // percentage
  uptime            Float    @default(100) // percentage
  dbQueryTime       Float    @default(0) // average in ms
  slowQueries       Int      @default(0) // count of slow queries
  cacheHitRate      Float    @default(0) // percentage
  memoryUsage       Float    @default(0) // percentage
  cpuUsage          Float    @default(0) // percentage
  diskUsage         Float    @default(0) // percentage
  createdAt         DateTime @default(now())

  @@unique([date])
  @@index([date])
  @@index([avgResponseTime])
  @@index([errorRate])
}

// A/B testing and experiments
model Experiment {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  status        String   @default("draft") // 'draft', 'running', 'completed', 'paused'
  startDate     DateTime?
  endDate       DateTime?
  targetMetric  String   // 'conversion_rate', 'engagement', 'retention', etc.
  variants      Json     // Experiment variants configuration
  trafficSplit  Json     // How traffic is split between variants
  results       Json?    // Experiment results
  isActive      Boolean  @default(false)
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  creator       User @relation("ExperimentCreator", fields: [createdBy], references: [id])
  participants  UserExperiment[] @relation("UserExperimentExperiment")

  @@index([status])
  @@index([isActive])
  @@index([startDate])
}

// User experiment participation
model UserExperiment {
  id           String   @id @default(cuid())
  userId       String
  experimentId String
  variant      String   // Which variant the user is in
  assignedAt   DateTime @default(now())
  converted    Boolean  @default(false)
  convertedAt  DateTime?

  user         User @relation("UserExperimentUser", fields: [userId], references: [id], onDelete: Cascade)
  experiment   Experiment @relation("UserExperimentExperiment", fields: [experimentId], references: [id], onDelete: Cascade)

  @@unique([userId, experimentId])
  @@index([experimentId])
  @@index([variant])
  @@index([converted])
}



// Content scheduling and publishing
model ScheduledPost {
  id            String   @id @default(cuid())
  title         String
  content       String   @db.Text
  categoryId    String
  authorId      String
  scheduledFor  DateTime
  published     Boolean  @default(false)
  publishedAt   DateTime?
  postId        String?  @unique // Reference to the actual post when published
  tags          String[] // Store as array
  prefixId      String?
  metadata      Json?    // Additional metadata like images, attachments
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category @relation("ScheduledPostCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  author        User @relation("ScheduledPostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  prefix        ThreadPrefix? @relation("ScheduledPostPrefix", fields: [prefixId], references: [id])
  post          Post? @relation("ScheduledToPost", fields: [postId], references: [id])

  @@index([scheduledFor])
  @@index([published])
  @@index([authorId])
}

// Content versioning and history
model ContentVersion {
  id            String   @id @default(cuid())
  contentId     String   // Post or Comment ID
  contentType   ContentType
  version       Int
  title         String?  // Only for posts
  content       String   @db.Text
  changeReason  String?
  authorId      String
  createdAt     DateTime @default(now())

  author        User @relation("ContentVersionAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([contentId, version])
  @@index([contentId])
  @@index([contentType])
}

// Auto-moderation system
model ModerationRule {
  id            String   @id @default(cuid())
  name          String
  description   String?
  enabled       Boolean  @default(true)
  ruleType      ModerationRuleType
  conditions    Json     // Store conditions as JSON (keywords, patterns, etc.)
  actions       Json     // Store actions as JSON (hide, flag, delete, etc.)
  severity      ModerationSeverity @default(MEDIUM)
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  creator       User @relation("ModerationRuleCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  logs          ModerationLog[]

  @@index([enabled])
  @@index([ruleType])
}

model ModerationLog {
  id            String   @id @default(cuid())
  ruleId        String?
  contentId     String
  contentType   ContentType
  action        ModerationAction
  reason        String
  automated     Boolean  @default(false)
  moderatorId   String?
  appealed      Boolean  @default(false)
  appealedAt    DateTime?
  appealReason  String?
  appealStatus  AppealStatus @default(PENDING)
  createdAt     DateTime @default(now())

  rule          ModerationRule? @relation(fields: [ruleId], references: [id])
  moderator     User? @relation("ModerationLogModerator", fields: [moderatorId], references: [id])

  @@index([contentId])
  @@index([contentType])
  @@index([automated])
  @@index([appealStatus])
}

// Content templates for quick posting
model ContentTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  title         String?
  content       String   @db.Text
  categoryId    String?
  tags          String[]
  isPublic      Boolean  @default(false)
  createdBy     String
  usageCount    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category? @relation("TemplateCategory", fields: [categoryId], references: [id])
  creator       User @relation("TemplateCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([isPublic])
  @@index([createdBy])
}

// Content approval workflow
model ContentApproval {
  id            String   @id @default(cuid())
  contentId     String
  contentType   ContentType
  status        ApprovalStatus @default(PENDING)
  submittedBy   String
  reviewedBy    String?
  reviewNotes   String?
  submittedAt   DateTime @default(now())
  reviewedAt    DateTime?

  submitter     User @relation("ContentApprovalSubmitter", fields: [submittedBy], references: [id], onDelete: Cascade)
  reviewer      User? @relation("ContentApprovalReviewer", fields: [reviewedBy], references: [id])

  @@unique([contentId, contentType])
  @@index([status])
  @@index([submittedBy])
}

// Content flags and reports enhancement
model ContentFlag {
  id            String   @id @default(cuid())
  contentId     String
  contentType   ContentType
  flagType      FlagType
  reason        String
  description   String?
  flaggedBy     String
  status        FlagStatus @default(OPEN)
  reviewedBy    String?
  reviewNotes   String?
  flaggedAt     DateTime @default(now())
  reviewedAt    DateTime?

  flagger       User @relation("ContentFlagFlagger", fields: [flaggedBy], references: [id], onDelete: Cascade)
  reviewer      User? @relation("ContentFlagReviewer", fields: [reviewedBy], references: [id])

  @@index([contentId])
  @@index([contentType])
  @@index([status])
  @@index([flagType])
}

// Enums for content management
enum ContentType {
  POST
  COMMENT
  DRAFT
}

enum ModerationRuleType {
  KEYWORD_FILTER
  SPAM_DETECTION
  TOXICITY_FILTER
  LINK_VALIDATION
  IMAGE_MODERATION
  USER_BEHAVIOR
  CONTENT_LENGTH
  RATE_LIMITING
}

enum ModerationSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ModerationAction {
  FLAG
  HIDE
  DELETE
  SHADOW_BAN
  TEMP_BAN
  PERM_BAN
  REQUIRE_APPROVAL
  ADD_WARNING
}

enum AppealStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_CHANGES
}

enum FlagType {
  SPAM
  INAPPROPRIATE
  HARASSMENT
  MISINFORMATION
  COPYRIGHT
  OFF_TOPIC
  DUPLICATE
  OTHER
}

enum FlagStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  DISMISSED
  ESCALATED
}

// Advanced User Management Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
  PENDING_VERIFICATION
  DEACTIVATED
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

enum VerificationType {
  EMAIL
  PHONE
  IDENTITY
  EXPERT
  ORGANIZATION
}

enum UserActivityType {
  LOGIN
  LOGOUT
  POST_CREATED
  COMMENT_CREATED
  PROFILE_UPDATED
  PASSWORD_CHANGED
  EMAIL_CHANGED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  SUSPENSION
  BAN
  WARNING_ISSUED
  REPUTATION_CHANGED
}

enum BanType {
  TEMPORARY
  PERMANENT
  IP_BAN
  SHADOW_BAN
}

enum WarningType {
  MINOR
  MAJOR
  SEVERE
  FINAL
}

// Advanced User Management Models

model UserVerification {
  id            String   @id @default(cuid())
  userId        String
  type          VerificationType
  status        VerificationStatus @default(UNVERIFIED)
  verificationCode String?
  verificationToken String?
  documentUrl   String?  // For identity verification
  notes         String?  @db.Text
  verifiedById  String?
  verifiedAt    DateTime?
  expiresAt     DateTime?
  rejectionReason String? @db.Text
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User @relation("UserVerifications", fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy    User? @relation("VerificationVerifiedBy", fields: [verifiedById], references: [id])

  @@unique([userId, type])
  @@index([status])
  @@index([type])
}

model UserBan {
  id            String   @id @default(cuid())
  userId        String
  bannedById    String
  type          BanType
  reason        String   @db.Text
  publicReason  String?  @db.Text // Public-facing reason
  duration      Int?     // Duration in minutes (null for permanent)
  expiresAt     DateTime?
  isActive      Boolean  @default(true)
  ipAddress     String?
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User @relation("UserBans", fields: [userId], references: [id], onDelete: Cascade)
  bannedBy      User @relation("BansIssued", fields: [bannedById], references: [id])
  appeals       BanAppeal[]

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
}

model BanAppeal {
  id            String   @id @default(cuid())
  banId         String
  userId        String
  reason        String   @db.Text
  status        AppealStatus @default(PENDING)
  reviewedById  String?
  reviewedAt    DateTime?
  reviewNotes   String?  @db.Text
  resolution    String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ban           UserBan @relation(fields: [banId], references: [id], onDelete: Cascade)
  user          User @relation("UserBanAppeals", fields: [userId], references: [id], onDelete: Cascade)
  reviewedBy    User? @relation("BanAppealsReviewed", fields: [reviewedById], references: [id])

  @@index([status])
  @@index([userId])
}

model UserWarning {
  id            String   @id @default(cuid())
  userId        String
  issuedById    String
  type          WarningType
  title         String
  reason        String   @db.Text
  points        Int      @default(1)
  expiresAt     DateTime?
  isActive      Boolean  @default(true)
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User @relation("UserWarningsReceived", fields: [userId], references: [id], onDelete: Cascade)
  issuedBy      User @relation("UserWarningsIssued", fields: [issuedById], references: [id])

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
}

model UserActivity {
  id            String   @id @default(cuid())
  userId        String
  type          UserActivityType
  description   String
  ipAddress     String?
  userAgent     String?
  location      String?  // Geolocation data
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())

  user          User @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model UserProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  displayName   String?
  firstName     String?
  lastName      String?
  dateOfBirth   DateTime?
  gender        String?
  phoneNumber   String?
  address       Json?    // Structured address data
  socialLinks   Json?    @default("{}") // Social media links
  interests     String[] // User interests/tags
  skills        String[] // User skills/expertise
  education     Json?    // Education history
  experience    Json?    // Work experience
  certifications Json?   // Professional certifications
  languages     String[] // Languages spoken
  timezone      String?
  profileViews  Int      @default(0)
  profileScore  Int      @default(0) // Calculated profile completeness score
  isPublic      Boolean  @default(true)
  showOnline    Boolean  @default(true)
  allowMessages Boolean  @default(true)
  allowFollows  Boolean  @default(true)
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)

  @@index([profileScore])
  @@index([isPublic])
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  theme         String   @default("system")
  language      String   @default("en")
  timezone      String   @default("UTC")
  privacySettings Json?   @default("{\"showEmail\":false,\"showPhone\":false,\"showOnline\":true}")
  contentSettings Json?   @default("{\"autoplayVideos\":true,\"showImages\":true,\"nsfwContent\":false}")
  moderationSettings Json? @default("{\"hideWarned\":false,\"hideDownvoted\":false}")
  customSettings Json?    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User @relation("UserSettings", fields: [userId], references: [id], onDelete: Cascade)
}

model UserLoginAttempt {
  id            String   @id @default(cuid())
  email         String
  ipAddress     String
  userAgent     String?
  isSuccessful  Boolean
  failureReason String?
  userId        String? // Only set if login was successful
  location      String?
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())

  user          User? @relation("UserLoginAttempts", fields: [userId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([ipAddress])
  @@index([isSuccessful])
  @@index([createdAt])
}

model UserReputationHistory {
  id            String   @id @default(cuid())
  userId        String
  change        Int      // Positive or negative change
  previousValue Int
  newValue      Int
  reason        String
  sourceId      String?  // ID of post, comment, etc. that caused the change
  sourceType    String?  // "post", "comment", "badge", etc.
  awardedById   String?
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())

  user          User @relation("UserReputationHistory", fields: [userId], references: [id], onDelete: Cascade)
  awardedBy     User? @relation("ReputationAwarded", fields: [awardedById], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model UserBadge {
  id            String   @id @default(cuid())
  name          String   @unique
  displayName   String
  description   String   @db.Text
  icon          String?
  color         String?
  category      String?
  rarity        String   @default("common") // common, rare, epic, legendary
  points        Int      @default(0) // Reputation points awarded
  requirements  Json     // Requirements to earn this badge
  isActive      Boolean  @default(true)
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userBadges    UserBadgeEarned[]

  @@index([category])
  @@index([rarity])
  @@index([isActive])
}

model UserBadgeEarned {
  id            String   @id @default(cuid())
  userId        String
  badgeId       String
  earnedAt      DateTime @default(now())
  awardedById   String?
  reason        String?
  metadata      Json?    @default("{}")

  user          User @relation("UserBadgesEarned", fields: [userId], references: [id], onDelete: Cascade)
  badge         UserBadge @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  awardedBy     User? @relation("BadgesAwarded", fields: [awardedById], references: [id])

  @@unique([userId, badgeId])
  @@index([earnedAt])
}