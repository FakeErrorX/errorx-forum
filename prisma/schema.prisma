// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  userId        Int       @unique @default(autoincrement()) // Custom sequential user ID
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastUsernameChangeAt DateTime?

  // Forum-specific fields
  bio           String?
  postCount     Int       @default(0)
  reputation    Int       @default(0)
  isActive      Boolean   @default(true)
  preferences   Json?     @default("{\"theme\": \"system\", \"notifications\": true, \"emailUpdates\": true}")

  // Role and permissions
  roleId        String?   @default("member") // Default role
  role          Role?     @relation(fields: [roleId], references: [id])

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  featuredPosts Post[]    @relation("FeaturedByUser")
  comments      Comment[]
  likes         Like[]
  passwordResets PasswordReset[]
  
  // New relations
  watches       Watch[]
  reports       Report[] @relation("ReportReporter")
  resolvedReports Report[] @relation("ReportResolver")
  notifications Notification[]

  // Reactions & Bookmarks
  reactions     Reaction[]
  bookmarks     Bookmark[]
  pollVotes     PollVote[]

  // Social graph & messaging
  follows       Follow[]       @relation("UserFollowsFollower")
  following     Follow[]       @relation("UserFollowsFollowing")
  ignores       Ignore[]       @relation("UserIgnoresIgnorer")
  ignoredBy     Ignore[]       @relation("UserIgnoresIgnored")
  conversations ConversationParticipant[]
  drafts        Draft[]
  sentMessages  ConversationMessage[] @relation("UserSentMessages")

  // Indexes for case-insensitive queries
  @@index([username], map: "username_ci_index")
  @@index([roleId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Forum models
model Category {
  id          String   @id @default(cuid())
  categoryId  Int      @unique @default(autoincrement()) // Custom sequential category ID
  name        String
  description String?
  icon        String?
  color       String?
  postCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       Post[]
  prefixes    ThreadPrefix[]
  drafts      Draft[]
}

model Post {
  id              String   @id @default(cuid())
  postId          Int      @unique @default(autoincrement()) // Custom sequential post ID
  title           String
  content         String   @db.Text
  categoryId      String
  authorId        String
  authorUsername  String   // Store username for faster queries
  isPinned        Boolean  @default(false)
  isFeatured      Boolean  @default(false)
  featuredAt      DateTime?
  featuredById    String?
  isLocked        Boolean  @default(false)
  views           Int      @default(0)
  likes           Int      @default(0)
  replies         Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  featuredBy      User?    @relation("FeaturedByUser", fields: [featuredById], references: [id])
  comments        Comment[]
  postLikes       Like[]   @relation("PostLikes")

  tags            PostTag[]
  watches         Watch[]
  reactions       Reaction[]
  bookmarks       Bookmark[]
  poll            Poll?
  prefixId        String?
  prefix          ThreadPrefix? @relation(fields: [prefixId], references: [id])

  @@index([isFeatured, featuredAt])
}

model Comment {
  id              String   @id @default(cuid())
  commentId       Int      @unique @default(autoincrement()) // Custom sequential comment ID
  postId          String
  authorId        String
  authorUsername  String   // Store username for faster queries
  content         String   @db.Text
  parentId        String?  // For nested replies
  likes           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent          Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  commentLikes    Like[]   @relation("CommentLikes")
  reactions       Reaction[]
}

model Like {
  id        String   @id @default(cuid())
  likeId    Int      @unique @default(autoincrement()) // Custom sequential like ID
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

// Reactions (emoji/like variants)
model Reaction {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  type      String   // e.g. 'like','love','laugh','wow','sad','angry','custom:thumbsup'
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type])
  @@unique([userId, commentId, type])
  @@index([postId])
  @@index([commentId])
}

// Bookmarks (thread subscriptions separate from Watches)
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Polls
model Poll {
  id         String   @id @default(cuid())
  postId     String   @unique
  question   String
  isMultiple Boolean  @default(false)
  closesAt   DateTime?
  createdAt  DateTime @default(now())

  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  options    PollOption[]
  votes      PollVote[]
}

model PollOption {
  id        String   @id @default(cuid())
  pollId    String
  text      String
  votes     Int      @default(0)
  pollVotes PollVote[]

  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@index([pollId])
}

model PollVote {
  id        String   @id @default(cuid())
  pollId    String
  optionId  String
  userId    String
  createdAt DateTime @default(now())

  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, optionId])
  @@index([userId])
}

// Tags
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     PostTag[]

  @@index([slug])
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([tagId])
}

// Thread prefixes
model ThreadPrefix {
  id         String   @id @default(cuid())
  name       String
  color      String?
  categoryId String?
  createdAt  DateTime @default(now())

  category   Category? @relation(fields: [categoryId], references: [id])
  posts      Post[]

  @@index([categoryId])
}

// Watch/Subscribe System
model Watch {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Content Reports
model Report {
  id          String   @id @default(cuid())
  reportId    Int      @unique @default(autoincrement())
  reporterId  String
  contentType String
  contentId   String
  reason      String
  description String?
  status      String   @default("pending")
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reporter    User @relation("ReportReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  resolver    User? @relation("ReportResolver", fields: [resolvedBy], references: [id])

  @@index([status])
  @@index([contentType, contentId])
  @@index([reporterId])
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
}

// Conversations (private messages)
model Conversation {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages      ConversationMessage[]
  participants  ConversationParticipant[]
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime?
  isOwner        Boolean  @default(false)

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model ConversationMessage {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String   @db.Text
  createdAt      DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("UserSentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

// Follow / Ignore
model Follow {
  id           String   @id @default(cuid())
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())

  follower     User @relation("UserFollowsFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following    User @relation("UserFollowsFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
}

model Ignore {
  id         String   @id @default(cuid())
  ignorerId  String
  ignoredId  String
  createdAt  DateTime @default(now())

  ignorer    User @relation("UserIgnoresIgnorer", fields: [ignorerId], references: [id], onDelete: Cascade)
  ignored    User @relation("UserIgnoresIgnored", fields: [ignoredId], references: [id], onDelete: Cascade)

  @@unique([ignorerId, ignoredId])
  @@index([ignoredId])
}

// Drafts for posts/comments
model Draft {
  id         String   @id @default(cuid())
  userId     String
  type       String   // 'post' | 'comment'
  categoryId String?
  postId     String?
  content    String   @db.Text
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id])

  @@index([userId])
}

// Role and Permission System
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?  @default("#6b7280") // Default gray color
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  permissions RolePermission[]

  @@index([name])
  @@index([isSystem])
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  category    String?  // Group permissions by category (e.g., "posts", "users", "admin")
  isSystem    Boolean  @default(false) // System permissions cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles       RolePermission[]

  @@index([name])
  @@index([category])
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}